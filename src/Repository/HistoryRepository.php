<?php

namespace Plugin\CustomerTracker\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\NoResultException;
use Doctrine\ORM\Query\Expr\GroupBy;
use Doctrine\ORM\Query\Expr\OrderBy;

/**
 * HistoryRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class HistoryRepository extends EntityRepository
{

    public function findLastOne($history)
    {
        $q = $this->createQueryBuilder('h')
            ->andWhere("h.session_id = :sessionId")
            ->setMaxResults(1)
            ->orderBy('h.visited', 'DESC')
            ->setParameter('sessionId', $history->getSessionId());
        if ($history->getId()) {
            $q->andWhere("h.id < :historyId")->setParameter('historyId', $history->getId());
        }
        $q = $q->getQuery();
        
        try {
            $result = $q->getSingleResult();
            return $result;
        } catch (NoResultException $e) {
            // 結果がない場合は空の配列を返す.
            return null;
        }
    }

    public function getActiveCount($timelimit)
    {
        $qb = $this->createQueryBuilder('h')
            ->select('distinct h.session_id')
            ->where('h.visited > :visited_expire')
            ->setParameter('visited_expire', (new \DateTime())->sub(new \DateInterval('PT' . $timelimit . 'S')));
        
        $result = $qb->getQuery()->getResult();
        if ($result)
            return sizeof($result);
        else
            return 0;
    }

    public function getGroupedHistory($timeRange)
    {
        $qb = $this->createQueryBuilder('h')
            ->where('h.visited > :visited_expire')
            ->setParameter('visited_expire', (new \DateTime())->sub(new \DateInterval('PT' . $timeRange . 'S')))
            ->addOrderBy('h.session_id', 'asc')
            ->addOrderBy('h.visited', 'desc');
        return $this->groupResult($qb->getQuery()
            ->getResult());
    }

    public function getLatestHistoryGroups($latestHistoryId)
    {
        $qb = $this->createQueryBuilder('h')
            ->where('h.id > :latestHistoryId')
            ->setParameter('latestHistoryId', $latestHistoryId)
            ->addOrderBy('h.session_id', 'asc')
            ->addOrderBy('h.visited', 'desc');
        $groups = $this->groupResult($qb->getQuery()
            ->getResult());
        return $groups;
    }

    protected function groupResult($results)
    {
        if ($results) {
            $groups = array();
            $lastSessionId = null;
            $histories = array();
            foreach ($results as $history) {
                $sessionId = $history->getSessionId();
                if ($sessionId != $lastSessionId) {
                    if ($lastSessionId != null) {
                        $groups[$lastSessionId] = $histories;
                        $histories = array();
                    }
                    $lastSessionId = $sessionId;
                }
                $histories[] = $history;
            }
            if ($lastSessionId != null) {
                $groups[$lastSessionId] = $histories;
            }
            uasort($groups, 'self::sortHistory');
            return $groups;
        } else {
            return null;
        }
    }

    private static function sortHistory($a, $b)
    {
        $ha = $a[0];
        $hb = $b[0];
        if ($ha->getVisited() == $hb->getVisited()) {
            return 0;
        }
        return ($ha->getVisited() > $hb->getVisited()) ? - 1 : 1;
    }
}
